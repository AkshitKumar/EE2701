#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
noweb
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fitting Data to Models
\end_layout

\begin_layout Author
Akshit Kumar
\end_layout

\begin_layout Author
EE14B127
\end_layout

\begin_layout Date
October 18, 2015
\end_layout

\begin_layout Abstract
In this week's assignment, we read data from a file and parse it.
 We analyse the data to extract information from it and study the effect
 of noise on the fitting process.
 We make use of the least square estimation technique to find the errors
 in the value of A and B.
 We make use of mean square method to calculate the epsilon matrix and plotting
 a contour plot of it for different values of A and B.
 We also plot a error and loglog error plot for the errors in A and B.
\end_layout

\begin_layout Section
Python Implementation for Program
\end_layout

\begin_layout Standard
The following contains the code snippet of the Python script along with
 the explanation provided below.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Importing all the required modules
\end_layout

\begin_layout Plain Layout

import numpy as np 
\end_layout

\begin_layout Plain Layout

from pylab import *
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import scipy.special as sp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to include all the necessary modules of Python which are made
 use of for plotting the graphs and vectorizing the functions.
 matplotlib is used to plot the graphs.
 scipy is used to make use of the linear algebra module.
 numpy is used to make vectors and matrices
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

matrix = np.loadtxt('fitting.dat') # Reading the matrix from fitting.dat file
\end_layout

\begin_layout Plain Layout

time = matrix[ : ,0] # Extracting the time column from the matrix
\end_layout

\begin_layout Plain Layout

data = matrix[ : ,1 : ] # Extracting the data columns from the matrix
\end_layout

\begin_layout Plain Layout

sigma = np.logspace(-1,-3,9) # Creating the sigma vector from -1 to -3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to extract information from the matrix which is read from the
 fitting.dat file by making use of the loadtxt function.
 The extracted matrix is split to extract the time column vector and the
 data matrix.
 Also we use logspace function from the numpy module to create a sigma vector
 which holds various values of noise equally spaced in log scale.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Function to display the graph generated from fitting.dat
\end_layout

\begin_layout Plain Layout

def displayPlotNoise():
\end_layout

\begin_layout Plain Layout

	plt.figure(0) # Setting plt to figure 0
\end_layout

\begin_layout Plain Layout

	plt.plot(time,data) # Plotting the graph of f(t) v/s t
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"$t$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"$f(t)=g(t)+n(t)$") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.legend(("1","2","3","4","5","6","7","8","9")) # Setting the legend of
 the graph
\end_layout

\begin_layout Plain Layout

	plt.title(r"Plot of $f(t)$ v/s $t$") # Setting the title of the graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayPlotNoise() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to declare a function to plot the graph of the matrix obtained
 from the fitting.dat 
\end_layout

\end_body
\end_document
