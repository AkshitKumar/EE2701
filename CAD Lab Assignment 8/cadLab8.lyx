#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
noweb
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Fitting Data to Models
\end_layout

\begin_layout Author
Akshit Kumar
\end_layout

\begin_layout Author
EE14B127
\end_layout

\begin_layout Date
October 18, 2015
\end_layout

\begin_layout Abstract
In this week's assignment, we read data from a file and parse it.
 We analyse the data to extract information from it and study the effect
 of noise on the fitting process.
 We make use of the least square estimation technique to find the errors
 in the value of A and B.
 We make use of mean square method to calculate the epsilon matrix and plotting
 a contour plot of it for different values of A and B.
 We also plot a error and loglog error plot for the errors in A and B.
\end_layout

\begin_layout Section
Python Implementation for Program
\end_layout

\begin_layout Standard
The following contains the code snippet of the Python script along with
 the explanation provided below.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Importing all the required modules
\end_layout

\begin_layout Plain Layout

import numpy as np 
\end_layout

\begin_layout Plain Layout

from pylab import *
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

import scipy.special as sp
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to include all the necessary modules of Python which are made
 use of for plotting the graphs and vectorizing the functions.
 matplotlib is used to plot the graphs.
 scipy is used to make use of the linear algebra module.
 numpy is used to make vectors and matrices
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

matrix = np.loadtxt('fitting.dat') # Reading the matrix from fitting.dat file
\end_layout

\begin_layout Plain Layout

time = matrix[ : ,0] # Extracting the time column from the matrix
\end_layout

\begin_layout Plain Layout

data = matrix[ : ,1 : ] # Extracting the data columns from the matrix
\end_layout

\begin_layout Plain Layout

sigma = np.logspace(-1,-3,9) # Creating the sigma vector from -1 to -3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to extract information from the matrix which is read from the
 fitting.dat file by making use of the loadtxt function.
 The extracted matrix is split to extract the time column vector and the
 data matrix.
 Also we use logspace function from the numpy module to create a sigma vector
 which holds various values of noise equally spaced in log scale.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Function to display the graph generated from fitting.dat
\end_layout

\begin_layout Plain Layout

def displayPlotNoise():
\end_layout

\begin_layout Plain Layout

	plt.figure(0) # Setting plt to figure 0
\end_layout

\begin_layout Plain Layout

	plt.plot(time,data) # Plotting the graph of f(t) v/s t
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"$t$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"$f(t)=g(t)+n(t)$") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.legend(("1","2","3","4","5","6","7","8","9")) # Setting the legend of
 the graph
\end_layout

\begin_layout Plain Layout

	plt.title(r"Plot of $f(t)$ v/s $t$") # Setting the title of the graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayPlotNoise() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to declare a function to plot the graph of the matrix obtained
 from the fitting.dat.
 The individually steps are commented.
 The function is called to execute it.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

data1 = data[:,0]  # Extracting the first column of the data matrix
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to extract the first column of the data matrix from the fitting.dat
 file.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Function to calculate the value of function for given A and B
\end_layout

\begin_layout Plain Layout

def g(t,A,B):
\end_layout

\begin_layout Plain Layout

	return (A*sp.jn(2,t)) + ((B)*t)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

y = g(time,1.05,-0.105) #Calling the function for A= 1.05 and B= -0.105
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Function to display the true value of function without the noise
\end_layout

\begin_layout Plain Layout

def displayPlot():
\end_layout

\begin_layout Plain Layout

	plt.figure(1) # Setting plt to figure 1
\end_layout

\begin_layout Plain Layout

	p = plt.plot(time,y,'b-') # Plotting the graph of f(t) v/s t
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"$t$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"$g(t)$") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.legend(("True Value")) # Setting the legend of the graph
\end_layout

\begin_layout Plain Layout

	plt.title(r"Plot of $g(t)$ v/s $t$") # Setting the title of the graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayPlot() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to define a function g(t) which returns the true value of the
 function i.e.
 without the random noise being added to it.
 The function is called and stored in a vector y.
 Define the displayPlot() function to plot the true value of the function
 g(t).
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

#Function to display the error in the function using errobar
\end_layout

\begin_layout Plain Layout

def displayError(t,data1):
\end_layout

\begin_layout Plain Layout

	plt.figure(2) # Setting plt to figure 2
\end_layout

\begin_layout Plain Layout

	errorbar(t[::5],data1[::5],sigma[0],fmt='ro') # Plotting the errorbar for
 data1 with sigma = sigma[0] 
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"$t$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"$Error in data$") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.plot(time,y,'k-') # Plotting the function g(t)
\end_layout

\begin_layout Plain Layout

	plt.title(r"Plot of $Error$ v/s $t$") # Setting the title of the graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayError(time,data1) # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to generate a plot of the first column of data with error bars.
 Every 5th data item is plotted to make it readable.Also the exact curve
 is plotted to see how much it diverges.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

x = sp.jn(2,time) # defining the x column vector
\end_layout

\begin_layout Plain Layout

t = time # defining the time column vector
\end_layout

\begin_layout Plain Layout

M = c_[x,t] # Concatanating the x and time column vectors into a matrix
 of 2 columns
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

val = np.array([[1.05],[-0.105]]) # Defining the (A0,B0) column matrix
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

values =  np.mat(M)*np.mat(val) # Matrix multiplication to find the value
 of g(t)
\end_layout

\begin_layout Plain Layout

y2 = np.array(y) # Converting y2 into an array
\end_layout

\begin_layout Plain Layout

y2.shape = (len(y),1) # Converting it into a column matrix by changing the
 shape of the matrix
\end_layout

\begin_layout Plain Layout

print y2 - values # Verify that values obtained from the function and matrix
 multiplication is same
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to obtain g(t,A,B) as column vector by creating a matrix equation.
 We construct a matrix M by using M = c_[x,t].(A0,B0) column is made by making
 use of np.array([[1.05],[-0.105]]) .
 Then matrix multiplication is done and vector values is obtained.
 The shape of values vector is changed into a column vector and subtracted
 with the y vector.
 We obtain a column of 0s,verify that the values obtained obtained in the
 two vectors are the same.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout
*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

A = np.arange(0.0,2.0,0.1) # A vector
\end_layout

\begin_layout Plain Layout

B = np.arange(-0.2,0.0,0.01) # B vector
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Function to calculate the mean square estimation
\end_layout

\begin_layout Plain Layout

def meanSquare(data1,time,A,B):
\end_layout

\begin_layout Plain Layout

	sum = 0
\end_layout

\begin_layout Plain Layout

	for i in range(len(data1)):
\end_layout

\begin_layout Plain Layout

		sum = sum + (data1[i] - g(time[i],A,B))**2
\end_layout

\begin_layout Plain Layout

	return sum/len(data1)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Creating a 2D matrix assigning all values to 0
\end_layout

\begin_layout Plain Layout

epsilon = [[0 for x in range(len(A))] for x in range(len(A))]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Iterating through the 2D matrix and assinging calculated values of epsilon
\end_layout

\begin_layout Plain Layout

for i in range(len(A)):
\end_layout

\begin_layout Plain Layout

	for j in range(len(B)):
\end_layout

\begin_layout Plain Layout

		epsilon[i][j] = meanSquare(data1,time,A[i],B[j])
\end_layout

\end_inset

'
\end_layout

\begin_layout Standard
Code snippet to declare two vectors A and B by making use of arange function
 of numpy module.
 We then define the meanSquare() to calculate the mean square of the values
 in the data1 column matrix.
 Theses values are stored in a 2D matrix of name epsilon which is initially
 initialised to all 0s.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

# Function to display the contout plot of epsilon
\end_layout

\begin_layout Plain Layout

def displayEpsilon():
\end_layout

\begin_layout Plain Layout

	plt.figure(3) # Setting plt to figure 3
\end_layout

\begin_layout Plain Layout

	plt.contour(A,B,epsilon) # Plotting the contour plot of epsilon
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"A Values") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"B Values") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.title(r"Contour Plot of $
\backslash
epsilon$") # Setting the title of the graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayEpsilon() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to display the contour plots of the epsilon values.
 We plot the contours by making use of the contour function in the matplotlib
 module,which takes three arguments - vector A,vector B and 2D matrix epsilon.
 We obtain concentric ellipses in the contour plot.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

a,b = np.linalg.lstsq(M,data)[0] # Calculating the best estimate of a,b using
 lstsq function from scipy.linalg
\end_layout

\begin_layout Plain Layout

errorInA = abs(a-1.05) # Calculating the error in values of A
\end_layout

\begin_layout Plain Layout

errorInB = abs(b+0.105) # Calculating the error in the values of B
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to find the best estimate of the values of A and B by making
 use of lstsq fucntion from the linalg module of scipy.
 We then find the absolute errors in the values of A and B from the fixed
 values of A = 1.05 and B = -0.105.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status open

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

def displayErrorEstimate():
\end_layout

\begin_layout Plain Layout

	plt.figure(4) # Setting plt to figure 4
\end_layout

\begin_layout Plain Layout

	plt.plot(sigma,errorInA,'ro',sigma,errorInB,'b+') # Plotting the graph
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"Noise $
\backslash
sigma$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"Error in values") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.legend(("Error in values of A","Error in values of B"))
\end_layout

\begin_layout Plain Layout

	plt.title(r"Plot of error in A and B values") # Setting the title of the
 graph
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayErrorEstimate() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to plot the graph of errors in A and B against the value of
 noise randomly added to the signal.
 We can observe that the error increases as the value of noise increases,though
 there is no linear relationship in that.
\end_layout

\begin_layout Standard
\begin_inset Flex Chunk
status collapsed

\begin_layout Plain Layout

\begin_inset Argument 1
status open

\begin_layout Plain Layout

*
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

def displayErrorEstimateLog():
\end_layout

\begin_layout Plain Layout

	plt.figure(5) # Setting plt to figure 4
\end_layout

\begin_layout Plain Layout

	plt.loglog(sigma,errorInA,'ro',sigma,errorInB,'b+')# Plotting the graph
\end_layout

\begin_layout Plain Layout

	plt.xlabel(r"Noise $
\backslash
sigma$") # Setting the X-label
\end_layout

\begin_layout Plain Layout

	plt.ylabel(r"Error in values") # Setting the Y-label
\end_layout

\begin_layout Plain Layout

	plt.title(r" loglog Plot of error in A and B values") # Setting the title
 of the graph
\end_layout

\begin_layout Plain Layout

	plt.legend(("Error in values of A","Error in values of B"))
\end_layout

\begin_layout Plain Layout

	plt.show() # show() function to display the plot
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

displayErrorEstimateLog() # Calling the function
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Code snippet to plot the loglog graph of errors in A and B against the value
 of noise randomly added to the signal.
 We can observe that the error increases as the value of noise increases,though
 there is no linear relationship in that.
\end_layout

\begin_layout Section
Output of the Program
\end_layout

\begin_layout Standard
We obtain the following graphs as output of the program
\end_layout

\begin_layout Subsection
Plot of 
\begin_inset Formula $f(t)$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_0.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plot of 
\begin_inset Formula $f(t)$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plot of 
\begin_inset Formula $g(t)$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_1.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plot of 
\begin_inset Formula $g(t)$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plot of 
\begin_inset Formula $Error$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_2.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plot of 
\begin_inset Formula $Error$
\end_inset

 v/s 
\begin_inset Formula $t$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Contour Plot of 
\begin_inset Formula $\epsilon$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_3.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contour Plot of 
\begin_inset Formula $\epsilon$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Plot of error in A and B values
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_4.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Plot of error in A and B values
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
loglog Plot of error in A and B values
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename figure_5.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
loglog Plot of error in A and B values
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Verification of values obtained from function and matrix
\end_layout

\begin_layout Standard
In order to check that the values obtained from matrix multiplication are
 same as that obtained from function g(t,A,B),we should get a zero column
 vector on subtracting the two matrices.We obtain the following output:
\end_layout

\begin_layout Standard
[[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]
\end_layout

\begin_layout Standard
[ 0.]]
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
