#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\paragraph_spacing single
Introduction to LyX
\end_layout

\begin_layout Author
Akshit Kumar (EE14B127)
\end_layout

\begin_layout Date
11th August 2015 
\end_layout

\begin_layout Abstract
This report contains the source code for the implementation of the C program
 which reads the text of a file and gives the number of words of different
 lengths and tabulates it in an horizontal histogram and outputs the data.
 The C program has been implemented using both arrays and pointes.
 In the array implementation array indexing is used to retrieve the value
 at that index.
 In the pointer implemenation a pointer is used to traverse the buffer array.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
C Assignment
\end_layout

\begin_layout Subsection
Implementation using arrays
\end_layout

\begin_layout Standard
The following code reads the contents of a file passed as command line arguments
 and calculates the number of words of different lengths.
 It does so by looping through the whole buffer array until it encounter
 a '
\backslash
0'.
 Following is the code :
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdio.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdlib.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#define MAXLENGTH 512 //Defining the MAXLENGTH of string to be taken
\end_layout

\begin_layout LyX-Code

\color blue
/* main() function takes argument from Command Line */
\end_layout

\begin_layout LyX-Code

\color blue
int main(int argc, char **argv){
\end_layout

\begin_layout LyX-Code

\color blue
    /*Program expects a filename.
 Check that argument was passed */
\end_layout

\begin_layout LyX-Code

\color blue
    if(argc!=2){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("Usage ./a.out <filename>");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(1);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Open file while checking for existence */
\end_layout

\begin_layout LyX-Code

\color blue
    FILE *fp = fopen(argv[1],"r");
\end_layout

\begin_layout LyX-Code

\color blue
    if(fp==NULL){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("File could not be opened");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(2);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Read in lines from file and process.
 Note the use of fgets() which is */
\end_layout

\begin_layout LyX-Code

\color blue
    /* more secure than gets() */
\end_layout

\begin_layout LyX-Code

\color blue
    char buf[MAXLENGTH]; // Declaring the array buf to store file stream
\end_layout

\begin_layout LyX-Code
    int lengthFreq[11] = {0}; // Hold counting information and initialising
 to 0 
\end_layout

\begin_layout LyX-Code
    
\color blue
while(fgets(buf,MAXLENGTH,fp)){
\end_layout

\begin_layout LyX-Code
        int count = 0,i=0; // Initialising iteration and counter variable
\end_layout

\begin_layout LyX-Code
        /* Iterating through the buf array till we encounter the end of
 buf array */
\end_layout

\begin_layout LyX-Code
        while(buf[i]!='
\backslash
0'){
\end_layout

\begin_layout LyX-Code
            /* Checking for word separators like ' ','
\backslash
t',',' and end of buf array */
\end_layout

\begin_layout LyX-Code
            if(buf[i]==' ' || buf[i]==',' || buf[i]==':' || buf[i]=='
\backslash
t' || 
\end_layout

\begin_layout LyX-Code
                buf[i]==';' || buf[i+1]=='
\backslash
0'){
\end_layout

\begin_layout LyX-Code
                lengthFreq[count]++; 
\end_layout

\begin_layout LyX-Code
                count = 0;
\end_layout

\begin_layout LyX-Code
            }
\end_layout

\begin_layout LyX-Code
            else{
\end_layout

\begin_layout LyX-Code
                /* Checking for the alphabet */
\end_layout

\begin_layout LyX-Code
                if((buf[i]>='A' && buf[i]<='Z') || (buf[i]>='a' && buf[i]<='z'))
{
\end_layout

\begin_layout LyX-Code
                        count++;
\end_layout

\begin_layout LyX-Code
                }
\end_layout

\begin_layout LyX-Code
            }
\end_layout

\begin_layout LyX-Code
        i++;
\end_layout

\begin_layout LyX-Code
        }
\end_layout

\begin_layout LyX-Code
    
\color blue
}
\end_layout

\begin_layout LyX-Code
    /* Printing out the result of the analysis */
\end_layout

\begin_layout LyX-Code
    int k;
\end_layout

\begin_layout LyX-Code
    for(k=3;k<=10;k++){
\end_layout

\begin_layout LyX-Code
        printf("%d Letter Words: %d
\backslash
n",k,lengthFreq[k]);
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
    return 0;
\end_layout

\begin_layout LyX-Code

\color blue
}
\end_layout

\begin_layout Subsection
Implementation using Pointers 
\end_layout

\begin_layout Standard
The following code reads the contents of a file passed as command line arguments
 and calculates the number of words of different lengths.
 It does by making use of pointers which initially points to the zero indexed
 element of buf array and value at any index - i is retrieved by making
 use of a pointer ptr.
 Following is the code :
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdio.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdlib.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#define MAXLENGTH 512 //Defining the MAXLENGTH of string to be taken
\end_layout

\begin_layout LyX-Code

\color blue
/* main() function takes argument from Command Line */
\end_layout

\begin_layout LyX-Code

\color blue
int main(int argc, char **argv){
\end_layout

\begin_layout LyX-Code

\color blue
    /*Program expects a filename.
 Check that argument was passed */
\end_layout

\begin_layout LyX-Code

\color blue
    if(argc!=2){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("Usage ./a.out <filename>");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(1);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Open file while checking for existence */
\end_layout

\begin_layout LyX-Code

\color blue
    FILE *fp = fopen(argv[1],"r");
\end_layout

\begin_layout LyX-Code

\color blue
    if(fp==NULL){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("File could not be opened");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(2);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Read in lines from file and process.
 Note the use of fgets() which is */
\end_layout

\begin_layout LyX-Code

\color blue
    /* more secure than gets() */
\end_layout

\begin_layout LyX-Code

\color blue
    char buf[MAXLENGTH]; // Array buf in which the file stream will be stored
\end_layout

\begin_layout LyX-Code
    int lengthFreq[11] = {0}; // Hold counting information and initialising
 to 0 
\end_layout

\begin_layout LyX-Code
    
\color blue
while(fgets(buf,MAXLENGTH,fp)){
\end_layout

\begin_layout LyX-Code
        int count = 0,i=0; // Initialising iteration and counter variable
\end_layout

\begin_layout LyX-Code
        char *ptr; // Declaration of a pointer ptr
\end_layout

\begin_layout LyX-Code
        ptr = buf; // ptr points to the address of buf[0]
\end_layout

\begin_layout LyX-Code
        while(*ptr!='
\backslash
0'){
\end_layout

\begin_layout LyX-Code
            /* Checking for word separators like ' ','
\backslash
t',',' and end of buf array */
\end_layout

\begin_layout LyX-Code
            if(*ptr==' ' || *ptr==',' || *ptr==':' || *ptr=='
\backslash
t' ||
\end_layout

\begin_layout LyX-Code
             *ptr==';' || *(ptr+1)=='
\backslash
0'){
\end_layout

\begin_layout LyX-Code
                lengthFreq[count]++;
\end_layout

\begin_layout LyX-Code
                count = 0;
\end_layout

\begin_layout LyX-Code
            }
\end_layout

\begin_layout LyX-Code
            else{
\end_layout

\begin_layout LyX-Code
                /* Checking for the alphabet */
\end_layout

\begin_layout LyX-Code
                if((*ptr>='A' && *ptr<='Z') || (*ptr>='a' && *ptr<='z')){
\end_layout

\begin_layout LyX-Code
                    count++;
\end_layout

\begin_layout LyX-Code
                }
\end_layout

\begin_layout LyX-Code
            }
\end_layout

\begin_layout LyX-Code
            ptr++;
\end_layout

\begin_layout LyX-Code
        }
\end_layout

\begin_layout LyX-Code
    
\color blue
}
\end_layout

\begin_layout LyX-Code
    /* Printing out the result of the analysis */
\end_layout

\begin_layout LyX-Code
    int k;
\end_layout

\begin_layout LyX-Code
    for(k=3;k<=10;k++){
\end_layout

\begin_layout LyX-Code
        printf("%d Letter Words: %d
\backslash
n",k,lengthFreq[k]);
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
    return 0;
\end_layout

\begin_layout LyX-Code

\color blue
}
\end_layout

\begin_layout Subsection
Implementation of Horizontal Histogram - Extra Credit Assignment
\end_layout

\begin_layout Subsubsection
Implemenation using arrays
\end_layout

\begin_layout Standard
The following code in addition to giving raw data, also prints out an histogram
 displaying the number of words of different length in a text file.
 This is implemented using arrays.
 Following is the code:
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdio.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdlib.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#define MAXLENGTH 512 //Defining the MAXLENGTH of string to be taken
\end_layout

\begin_layout LyX-Code

\color blue
/* main() function takes argument from Command Line */
\end_layout

\begin_layout LyX-Code

\color blue
int main(int argc, char **argv){
\end_layout

\begin_layout LyX-Code

\color blue
    /*Program expects a filename.
 Check that argument was passed */
\end_layout

\begin_layout LyX-Code

\color blue
    if(argc!=2){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("Usage ./a.out <filename>");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(1);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Open file while checking for existence */
\end_layout

\begin_layout LyX-Code

\color blue
    FILE *fp = fopen(argv[1],"r");
\end_layout

\begin_layout LyX-Code

\color blue
    if(fp==NULL){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("File could not be opened");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(2);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Read in lines from file and process.
 Note the use of fgets() which is */
\end_layout

\begin_layout LyX-Code

\color blue
    /* more secure than gets() */
\end_layout

\begin_layout LyX-Code

\color blue
    char buf[MAXLENGTH]; // Array buf in which the file stream will be stored
\end_layout

\begin_layout LyX-Code

\color black
    int lengthFreq[11] = {0}; // Hold counting information and initialising
 to 0 
\end_layout

\begin_layout LyX-Code

\color black
    
\color blue
while(fgets(buf,MAXLENGTH,fp)){
\end_layout

\begin_layout LyX-Code

\color black
        int count = 0,i=0; // Initialising iteration and counter variable
\end_layout

\begin_layout LyX-Code

\color black
        /* Iterating through the buf array till we encounter the end of
 buf array */
\end_layout

\begin_layout LyX-Code

\color black
        while(buf[i]!='
\backslash
0'){
\end_layout

\begin_layout LyX-Code

\color black
            /* Checking for word separators like ' ','
\backslash
t',',' and end of buf array */
\end_layout

\begin_layout LyX-Code

\color black
            if(buf[i]==' ' || buf[i]==',' || buf[i]==':' || buf[i]=='
\backslash
t' || 
\end_layout

\begin_layout LyX-Code

\color black
                buf[i]==';' || buf[i+1]=='
\backslash
0'){
\end_layout

\begin_layout LyX-Code

\color black
                lengthFreq[count]++; 
\end_layout

\begin_layout LyX-Code

\color black
                count = 0;
\end_layout

\begin_layout LyX-Code

\color black
            }
\end_layout

\begin_layout LyX-Code

\color black
            else{
\end_layout

\begin_layout LyX-Code

\color black
                /* Checking for the alphabet */
\end_layout

\begin_layout LyX-Code

\color black
                if((buf[i]>='A' && buf[i]<='Z') || (buf[i]>='a' && buf[i]<='z'))
{
\end_layout

\begin_layout LyX-Code

\color black
                    count++;
\end_layout

\begin_layout LyX-Code

\color black
                }
\end_layout

\begin_layout LyX-Code

\color black
            }
\end_layout

\begin_layout LyX-Code

\color black
            i++;
\end_layout

\begin_layout LyX-Code

\color black
        }
\end_layout

\begin_layout LyX-Code

\color black
    
\color blue
}
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing out the result of the analysis */
\end_layout

\begin_layout LyX-Code

\color black
    int k,j;
\end_layout

\begin_layout LyX-Code

\color black
    for(k=3;k<=10;k++){
\end_layout

\begin_layout LyX-Code

\color black
        printf("%d Letter Words: %d
\backslash
n",k,lengthFreq[k]);
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing of the horizontal histogram */
\end_layout

\begin_layout LyX-Code

\color black
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing the line for 10 separately */
\end_layout

\begin_layout LyX-Code

\color black
    printf("10|");
\end_layout

\begin_layout LyX-Code

\color black
    for(j=0;j<lengthFreq[10];j++){
\end_layout

\begin_layout LyX-Code

\color black
        printf(" * ");
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    /* Nested loop to print the frequency of different word lengths */
\end_layout

\begin_layout LyX-Code

\color black
    for(k=9;k>=1;k--){
\end_layout

\begin_layout LyX-Code

\color black
        printf("%d | ",k);
\end_layout

\begin_layout LyX-Code

\color black
        for(j=0;j<lengthFreq[k];j++){
\end_layout

\begin_layout LyX-Code

\color black
            printf("* ");
\end_layout

\begin_layout LyX-Code

\color black
        }
\end_layout

\begin_layout LyX-Code

\color black
        printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    printf("0 +---------------------------------- 
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    return 0;   
\end_layout

\begin_layout LyX-Code

\color blue
}
\end_layout

\begin_layout Subsubsection
Implementation using pointers
\end_layout

\begin_layout Standard
The following code in addition to giving raw data, also prints out an histogram
 displaying the number of words of different length in a text file.
 This is implemented using pointers.
 Following is the code:
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdio.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#include<stdlib.h> // Library File Access 
\end_layout

\begin_layout LyX-Code

\color blue
#define MAXLENGTH 512 //Defining the MAXLENGTH of string to be taken
\end_layout

\begin_layout LyX-Code

\color blue
/* main() function takes argument from Command Line */
\end_layout

\begin_layout LyX-Code

\color blue
int main(int argc, char **argv){
\end_layout

\begin_layout LyX-Code

\color blue
    /*Program expects a filename.
 Check that argument was passed */
\end_layout

\begin_layout LyX-Code

\color blue
    if(argc!=2){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("Usage ./a.out <filename>");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(1);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Open file while checking for existence */
\end_layout

\begin_layout LyX-Code

\color blue
    FILE *fp = fopen(argv[1],"r");
\end_layout

\begin_layout LyX-Code

\color blue
    if(fp==NULL){
\end_layout

\begin_layout LyX-Code

\color blue
        printf("File could not be opened");
\end_layout

\begin_layout LyX-Code

\color blue
        exit(2);
\end_layout

\begin_layout LyX-Code

\color blue
    }
\end_layout

\begin_layout LyX-Code

\color blue
    /* Read in lines from file and process.
 Note the use of fgets() which is */
\end_layout

\begin_layout LyX-Code

\color blue
    /* more secure than gets() */
\end_layout

\begin_layout LyX-Code

\color blue
    char buf[MAXLENGTH]; // Array buf in which the file stream will be stored
\end_layout

\begin_layout LyX-Code

\color black
    int lengthFreq[11] = {0}; // Hold counting information and initialising
 to 0 
\end_layout

\begin_layout LyX-Code

\color black
    
\color blue
while(fgets(buf,MAXLENGTH,fp)){
\end_layout

\begin_layout LyX-Code

\color black
        int count = 0,i=0; // Initialising iteration and counter variable
\end_layout

\begin_layout LyX-Code

\color black
        char *ptr; // Declaration of a pointer ptr
\end_layout

\begin_layout LyX-Code

\color black
        ptr = buf; // ptr points to the address of buf[0]
\end_layout

\begin_layout LyX-Code

\color black
        while(*ptr!='
\backslash
0'){
\end_layout

\begin_layout LyX-Code

\color black
            /* Checking for word separators like ' ','
\backslash
t',',' and end of buf array */
\end_layout

\begin_layout LyX-Code

\color black
            if(*ptr==' ' || *ptr==',' || *ptr==':' || *ptr=='
\backslash
t' ||
\end_layout

\begin_layout LyX-Code

\color black
             *ptr==';' || *(ptr+1)=='
\backslash
0'){
\end_layout

\begin_layout LyX-Code

\color black
                lengthFreq[count]++;
\end_layout

\begin_layout LyX-Code

\color black
                count = 0;
\end_layout

\begin_layout LyX-Code

\color black
            }
\end_layout

\begin_layout LyX-Code

\color black
            else{
\end_layout

\begin_layout LyX-Code

\color black
                /* Checking for the alphabet */
\end_layout

\begin_layout LyX-Code

\color black
                if((*ptr>='A' && *ptr<='Z') || (*ptr>='a' && *ptr<='z')){
\end_layout

\begin_layout LyX-Code

\color black
                    count++;
\end_layout

\begin_layout LyX-Code

\color black
                }
\end_layout

\begin_layout LyX-Code

\color black
            }
\end_layout

\begin_layout LyX-Code

\color black
            ptr++;
\end_layout

\begin_layout LyX-Code

\color black
        }
\end_layout

\begin_layout LyX-Code

\color black
    
\color blue
}
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing out the result of the analysis */
\end_layout

\begin_layout LyX-Code

\color black
    int k,j;
\end_layout

\begin_layout LyX-Code

\color black
    for(k=3;k<=10;k++){
\end_layout

\begin_layout LyX-Code

\color black
        printf("%d Letter Words: %d
\backslash
n",k,lengthFreq[k]);
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing of the horizontal histogram */
\end_layout

\begin_layout LyX-Code

\color black
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    /* Printing the line for 10 separately */
\end_layout

\begin_layout LyX-Code

\color black
    printf("10|");
\end_layout

\begin_layout LyX-Code

\color black
    for(j=0;j<lengthFreq[10];j++){
\end_layout

\begin_layout LyX-Code

\color black
        printf(" * ");
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    /* Nested loop to print the frequency of different word lengths */
\end_layout

\begin_layout LyX-Code

\color black
    for(k=9;k>=1;k--){
\end_layout

\begin_layout LyX-Code

\color black
        printf("%d | ",k);
\end_layout

\begin_layout LyX-Code

\color black
        for(j=0;j<lengthFreq[k];j++){
\end_layout

\begin_layout LyX-Code

\color black
            printf("* ");
\end_layout

\begin_layout LyX-Code

\color black
        }
\end_layout

\begin_layout LyX-Code

\color black
        printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    }
\end_layout

\begin_layout LyX-Code

\color black
    printf("0 +---------------------------------- 
\backslash
n");
\end_layout

\begin_layout LyX-Code

\color black
    return 0;   
\end_layout

\begin_layout LyX-Code

\color blue
}
\end_layout

\begin_layout Section
Output of the Programs 
\end_layout

\begin_layout Subsection
Implementation using Arrays
\end_layout

\begin_layout Quote
For the test.txt file 
\end_layout

\begin_layout Quote
Hello, this is a sample document which contains some random text.
 Some random words are : Apple , Ball , Cat , Dog , Egg, Fish , Goat , Hen
 etc.
\end_layout

\begin_layout Quote
OUTPUT is :
\end_layout

\begin_layout LyX-Code
3 Letter Words: 6
\end_layout

\begin_layout LyX-Code
4 Letter Words: 7
\end_layout

\begin_layout LyX-Code
5 Letter Words: 4
\end_layout

\begin_layout LyX-Code
6 Letter Words: 3
\end_layout

\begin_layout LyX-Code
7 Letter Words: 0
\end_layout

\begin_layout LyX-Code
8 Letter Words: 2
\end_layout

\begin_layout LyX-Code
9 Letter Words: 0
\end_layout

\begin_layout LyX-Code
10 Letter Words: 0
\end_layout

\begin_layout Subsection
Implementation using Pointers
\end_layout

\begin_layout Quote
For the test.txt file 
\end_layout

\begin_layout Quote
Hello, this is a sample document which contains some random text.
 Some random words are : Apple , Ball , Cat , Dog , Egg, Fish , Goat , Hen
 etc.
\end_layout

\begin_layout Quote
OUTPUT is :
\end_layout

\begin_layout LyX-Code
3 Letter Words: 6
\end_layout

\begin_layout LyX-Code
4 Letter Words: 7
\end_layout

\begin_layout LyX-Code
5 Letter Words: 4
\end_layout

\begin_layout LyX-Code
6 Letter Words: 3
\end_layout

\begin_layout LyX-Code
7 Letter Words: 0
\end_layout

\begin_layout LyX-Code
8 Letter Words: 2
\end_layout

\begin_layout LyX-Code
9 Letter Words: 0
\end_layout

\begin_layout LyX-Code
10 Letter Words: 0
\end_layout

\begin_layout Subsection
Extra Credit Assignment
\end_layout

\begin_layout Quote
For the test.txt file 
\end_layout

\begin_layout Quote
Hello, this is a sample document which contains some random text.
 Some random words are : Apple , Ball , Cat , Dog , Egg, Fish , Goat , Hen
 etc.
\end_layout

\begin_layout Quote
OUTPUT is :
\end_layout

\begin_layout LyX-Code
3 Letter Words: 6
\end_layout

\begin_layout LyX-Code
4 Letter Words: 7
\end_layout

\begin_layout LyX-Code
5 Letter Words: 4
\end_layout

\begin_layout LyX-Code
6 Letter Words: 3
\end_layout

\begin_layout LyX-Code
7 Letter Words: 0
\end_layout

\begin_layout LyX-Code
8 Letter Words: 2
\end_layout

\begin_layout LyX-Code
9 Letter Words: 0
\end_layout

\begin_layout LyX-Code
10 Letter Words: 0
\end_layout

\begin_layout LyX-Code
10|
\end_layout

\begin_layout LyX-Code
9 | 
\end_layout

\begin_layout LyX-Code
8 | * * 
\end_layout

\begin_layout LyX-Code
7 | 
\end_layout

\begin_layout LyX-Code
6 | * * * 
\end_layout

\begin_layout LyX-Code
5 | * * * * 
\end_layout

\begin_layout LyX-Code
4 | * * * * * * * 
\end_layout

\begin_layout LyX-Code
3 | * * * * * * 
\end_layout

\begin_layout LyX-Code
2 | * 
\end_layout

\begin_layout LyX-Code
1 | * 
\end_layout

\begin_layout LyX-Code
0 +----------------------------------
\end_layout

\end_body
\end_document
