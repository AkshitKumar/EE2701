#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Literate Programming with LyX & Data Structures in C
\end_layout

\begin_layout Author
Akshit Kumar
\end_layout

\begin_layout Author
EE14B127
\end_layout

\begin_layout Date
18th August 2015
\end_layout

\begin_layout Abstract
In this lab session, we will write a C program that implements linked lists.
 Data structures play a important role in programming and linked list is
 one of the important data structures.
 The linked list implemented in the assignment will be used in the spice
 program.
\end_layout

\begin_layout Abstract
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Implementation of Linked List in C (Extra Credit Included)
\end_layout

\begin_layout LyX-Code
#include <stdio.h> // Library File Access
\end_layout

\begin_layout LyX-Code
#include <stdlib.h> // Library File Access
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
/* Declaring a structure called Node */
\end_layout

\begin_layout LyX-Code

\color blue
typedef struct Node{
\end_layout

\begin_layout LyX-Code

\color blue
    struct Node *next;
\end_layout

\begin_layout LyX-Code

\color blue
    int a;
\end_layout

\begin_layout LyX-Code

\color blue
    int b;
\end_layout

\begin_layout LyX-Code

\color blue
}Node;
\end_layout

\begin_layout LyX-Code
/* Declaring a structure called List */       
\end_layout

\begin_layout LyX-Code

\color blue
typedef struct List {
\end_layout

\begin_layout LyX-Code

\color blue
    Node *head;
\end_layout

\begin_layout LyX-Code

\color blue
    int count;
\end_layout

\begin_layout LyX-Code

\color blue
}List;
\end_layout

\begin_layout LyX-Code
/* Function for making the List Head */
\end_layout

\begin_layout LyX-Code
List* createListHead(Node* new){
\end_layout

\begin_layout LyX-Code
    
\color blue
List *list = malloc(sizeof(List)); // Allocation of memory to struct List
\end_layout

\begin_layout LyX-Code

\color blue
    list->head = new; // Head points to new
\end_layout

\begin_layout LyX-Code

\color blue
    list->count = 0; // Initialise count of head to 0
\end_layout

\begin_layout LyX-Code

\color blue
    return list; // Return the struct List list
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
Node* createNode(int a,int b){
\end_layout

\begin_layout LyX-Code
    
\color blue
Node *new =(Node *) malloc(sizeof(Node)); // Allocation of memory to struct
 Node
\end_layout

\begin_layout LyX-Code

\color blue
    new->a = a; // Assign value a to new
\end_layout

\begin_layout LyX-Code

\color blue
    new->b = b; // Assign value b to new
\end_layout

\begin_layout LyX-Code

\color blue
    new->next = NULL; // new point to NULL
\end_layout

\begin_layout LyX-Code

\color blue
    return new; // Return the struct Node new
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code

\color blue
void add(List *list,Node *node){
\end_layout

\begin_layout LyX-Code

\color blue
    node->next = list->head; // Node points where head points
\end_layout

\begin_layout LyX-Code

\color blue
    list->head = node; // Head points to node
\end_layout

\begin_layout LyX-Code

\color blue
    list->count += 1; // Count of list increased by 1
\end_layout

\begin_layout LyX-Code

\color blue
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
void displayReverse(Node* head){
\end_layout

\begin_layout LyX-Code
    Node *temp = head; // temp points where head points
\end_layout

\begin_layout LyX-Code
    if(temp==NULL) // If temp points to NULL
\end_layout

\begin_layout LyX-Code
        return; // Return nothing
\end_layout

\begin_layout LyX-Code
    displayReverse(temp->next); // Recursive call of display
\end_layout

\begin_layout LyX-Code
    printf("%d %d
\backslash
n",temp->a,temp->b); //Printing the details of node
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
void display(List *list){
\end_layout

\begin_layout LyX-Code
    Node* current = list->head; // current points where head points
\end_layout

\begin_layout LyX-Code
    Node* next; // Declaring pointer next
\end_layout

\begin_layout LyX-Code
    while(current!=NULL){
\end_layout

\begin_layout LyX-Code
        printf("%d %d
\backslash
n",current->a,current->b); //Displaying details of current
\end_layout

\begin_layout LyX-Code
        next = current->next; // next points where current points
\end_layout

\begin_layout LyX-Code
        free(current); // Deleting the struct current
\end_layout

\begin_layout LyX-Code
        current = next; //current now points to next
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
    list = NULL; // list points to NULL
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
int main(){
\end_layout

\begin_layout LyX-Code
    int testcases; 
\end_layout

\begin_layout LyX-Code
    int a,b; 
\end_layout

\begin_layout LyX-Code
    scanf("%d",&testcases); 
\end_layout

\begin_layout LyX-Code
    scanf("%d %d",&a,&b);
\end_layout

\begin_layout LyX-Code
    Node *new = createNode(a,b); // Node new created
\end_layout

\begin_layout LyX-Code
    List *list = createListHead(new); // List list created
\end_layout

\begin_layout LyX-Code
    while(testcases-1){
\end_layout

\begin_layout LyX-Code
        int a, b;
\end_layout

\begin_layout LyX-Code
        scanf("%d %d",&a,&b);
\end_layout

\begin_layout LyX-Code
        Node *new = createNode(a,b); // Node new created
\end_layout

\begin_layout LyX-Code
        add(list,new); // Node new added to the linked list
\end_layout

\begin_layout LyX-Code
        testcases --; // testcases decremented by 1
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code
    printf("%s
\backslash
n","Printing Linked List in Reverse(Using Recursion)" );
\end_layout

\begin_layout LyX-Code
    Node *head = list->head; 
\end_layout

\begin_layout LyX-Code
    displayReverse(head); // Reverse printing of linked list
\end_layout

\begin_layout LyX-Code
    printf("
\backslash
n");
\end_layout

\begin_layout LyX-Code
    printf("%s
\backslash
n","Printing Linked List" );
\end_layout

\begin_layout LyX-Code
    display(list); // Printing of linked list
\end_layout

\begin_layout LyX-Code
    return 0;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Section
Output of the C Program
\end_layout

\begin_layout Standard
For the given input :
\end_layout

\begin_layout LyX-Code
5
\end_layout

\begin_layout LyX-Code
2 3
\end_layout

\begin_layout LyX-Code
-3 3
\end_layout

\begin_layout LyX-Code
4 5
\end_layout

\begin_layout LyX-Code
6 7
\end_layout

\begin_layout LyX-Code
8 9
\end_layout

\begin_layout Standard
The output obtained ie the printing of linked list in forward and reverse
 :
\end_layout

\begin_layout LyX-Code
Printing Linked List in Reverse(Using Recursion)
\end_layout

\begin_layout LyX-Code
2 3
\end_layout

\begin_layout LyX-Code
-3 3
\end_layout

\begin_layout LyX-Code
4 5
\end_layout

\begin_layout LyX-Code
6 7
\end_layout

\begin_layout LyX-Code
8 9
\end_layout

\begin_layout LyX-Code
Printing Linked List
\end_layout

\begin_layout LyX-Code
8 9
\end_layout

\begin_layout LyX-Code
6 7
\end_layout

\begin_layout LyX-Code
4 5
\end_layout

\begin_layout LyX-Code
-3 3
\end_layout

\begin_layout LyX-Code
2 3
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
